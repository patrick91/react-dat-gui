{"version":3,"sources":["../../src/components/DatSelect.jsx"],"names":["DatString","props","context","handleChange","bind","setState","value","getValue","nextProps","data","path","event","target","liveUpdate","update","state","_onUpdateValue","onUpdate","label","labelWidth","items","labelText","width","map","i","Component","propTypes","arrayOf","shape","string","isRequired","object","number","bool","func"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEMA,S;;;AAgBF,uBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA,0HAClBD,KADkB,EACXC,OADW;;AAExB,cAAKC,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AAFwB;AAG3B;;;;6CAEoB;AACjB,iBAAKC,QAAL,CAAc;AACVC,uBAAO,KAAKC,QAAL;AADG,aAAd;AAGH;;;kDAEyBC,S,EAAW;AACjC,iBAAKH,QAAL,CAAc;AACVC,uBAAO,KAAKC,QAAL,CAAcC,SAAd;AADG,aAAd;AAGH;;;mCAE4B;AAAA,gBAApBP,KAAoB,uEAAZ,KAAKA,KAAO;;AACzB,mBAAO,sBAAOA,MAAMQ,IAAb,EAAmBR,MAAMS,IAAzB,CAAP;AACH;;;qCAEYC,K,EAAO;AAAA;;AAChB,gBAAML,QAAQK,MAAMC,MAAN,CAAaN,KAA3B;AACA,iBAAKD,QAAL,CAAc,EAAEC,YAAF,EAAd,EAAyB,YAAM;AAC3B,uBAAKL,KAAL,CAAWY,UAAX,IAAyB,OAAKC,MAAL,EAAzB;AACH,aAFD;AAGH;;;iCAEQ;AAAA,gBACGR,KADH,GACa,KAAKS,KADlB,CACGT,KADH;;AAEL,iBAAKL,KAAL,CAAWe,cAAX,IAA6B,KAAKf,KAAL,CAAWe,cAAX,CAA0B,KAAKf,KAAL,CAAWS,IAArC,EAA2CJ,KAA3C,CAA7B;AACA,iBAAKL,KAAL,CAAWgB,QAAX,IAAuB,KAAKhB,KAAL,CAAWgB,QAAX,CAAoBX,KAApB,CAAvB;AACH;;;iCAEQ;AAAA,yBACsC,KAAKL,KAD3C;AAAA,gBACGS,IADH,UACGA,IADH;AAAA,gBACSQ,KADT,UACSA,KADT;AAAA,gBACgBC,UADhB,UACgBA,UADhB;AAAA,gBAC4BC,KAD5B,UAC4BA,KAD5B;;AAEL,gBAAMC,YAAY,sBAASH,KAAT,IAAkBA,KAAlB,GAA0BR,IAA5C;AACA,mBACI;AAAA;AAAA,kBAAI,WAAU,WAAd;AACI;AAAA;AAAA;AACI;AAAA;AAAA,0BAAM,WAAU,YAAhB,EAA6B,OAAO,EAAEY,OAAUH,UAAV,MAAF,EAApC;AAAkEE;AAAlE,qBADJ;AAGI;AAAA;AAAA;AACI,mCAAO,KAAKN,KAAL,CAAWT,KADtB;AAEI,mCAAO,EAAEgB,OAAU,MAAMH,UAAhB,MAAF,EAFX;AAGI,sCAAU,KAAKhB;AAHnB;AAKKiB,iCAASA,MAAMG,GAAN,CAAU;AAAA,mCAAK;AAAA;AAAA,kCAAQ,KAAKC,EAAEN,KAAf,EAAsB,OAAOM,EAAElB,KAA/B;AAAuCkB,kCAAEN;AAAzC,6BAAL;AAAA,yBAAV;AALd;AAHJ;AADJ,aADJ;AAeH;;;;EApEmB,gBAAMO,S;;AAAxBzB,S,CAEK0B,S,GAAY;AACfN,WAAO,iBAAUO,OAAV,CAAkB,iBAAUC,KAAV,CAAgB;AACrCtB,eAAO,iBAAUuB,MAAV,CAAiBC,UADa;AAErCZ,eAAO,iBAAUW,MAAV,CAAiBC;AAFa,KAAhB,CAAlB,EAGHA,UAJW;AAKfrB,UAAM,iBAAUsB,MALD;AAMfrB,UAAM,iBAAUmB,MAND;AAOfX,WAAO,iBAAUW,MAPF;AAQfV,gBAAY,iBAAUa,MARP;AASfnB,gBAAY,iBAAUoB,IATP;AAUfhB,cAAU,iBAAUiB,IAVL;AAWflB,oBAAgB,iBAAUkB;AAXX,C;kBAsERlC,S","file":"DatSelect.js","sourcesContent":["import result from 'lodash.result';\nimport isString from 'lodash.isstring';\nimport React, { PropTypes } from 'react';\n\nclass DatString extends React.Component {\n\n    static propTypes = {\n        items: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.string.isRequired,\n            label: PropTypes.string.isRequired,\n        })).isRequired,\n        data: PropTypes.object,\n        path: PropTypes.string,\n        label: PropTypes.string,\n        labelWidth: PropTypes.number,\n        liveUpdate: PropTypes.bool,\n        onUpdate: PropTypes.func,\n        _onUpdateValue: PropTypes.func,\n    };\n\n    constructor(props, context) {\n        super(props, context);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentWillMount() {\n        this.setState({\n            value: this.getValue()\n        });\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            value: this.getValue(nextProps)\n        });\n    }\n\n    getValue(props = this.props) {\n        return result(props.data, props.path);\n    }\n\n    handleChange(event) {\n        const value = event.target.value;\n        this.setState({ value }, () => {\n            this.props.liveUpdate && this.update();\n        });\n    }\n\n    update() {\n        const { value } = this.state;\n        this.props._onUpdateValue && this.props._onUpdateValue(this.props.path, value);\n        this.props.onUpdate && this.props.onUpdate(value);\n    }\n\n    render() {\n        const { path, label, labelWidth, items } = this.props;\n        const labelText = isString(label) ? label : path;\n        return (\n            <li className=\"cr select\">\n                <label>\n                    <span className=\"label-text\" style={{ width: `${labelWidth}%` }}>{labelText}</span>\n\n                    <select\n                        value={this.state.value}\n                        style={{ width: `${100 - labelWidth}%` }}\n                        onChange={this.handleChange}\n                    >\n                        {items && items.map(i => <option key={i.label} value={i.value}>{i.label}</option>)}\n                    </select>\n                </label>\n            </li>\n        );\n    }\n\n}\n\nexport default DatString;\n"]}